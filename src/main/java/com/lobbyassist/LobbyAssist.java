package com.lobbyassist;

import com.lobbyassist.net.packet.StunPacket;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableMap;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import org.pcap4j.core.*;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.Packet;
import org.pcap4j.packet.UdpPacket;

import java.net.InetAddress;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class LobbyAssist extends Application{

    private ObservableMap<Integer, Long> pings = FXCollections.observableHashMap();

    private double xOffset = 0;
    private double yOffset = 0;

    private PcapHandle ph;
    private InetAddress addr;

    public static void main (String[] args) {
        launch(args);
    }

    @Override
    public void start (Stage primaryStage) {
        Text title = new Text("LobbyAssist");
        Region region = new Region();

        Button close = new Button("X");
        close.setOnMouseClicked(event -> Platform.exit());

        Button minimize = new Button("-");
        minimize.setOnMouseClicked(event -> primaryStage.setIconified(true));


        HBox top = new HBox();
        top.setAlignment(Pos.CENTER_LEFT);
        top.getChildren().addAll(title, region, minimize, close);
        top.getStyleClass().add("hbox");
        HBox.setHgrow(region, Priority.ALWAYS);

        BorderPane pane = new BorderPane();
        pane.getStyleClass().add("main-pane");
        pane.setTop(top);

        pane.setOnMousePressed(event -> {
            xOffset = event.getSceneX();
            yOffset = event.getSceneY();
        });

        pane.setOnMouseDragged(event -> {
            primaryStage.setX(event.getScreenX() - xOffset);
            primaryStage.setY(event.getScreenY() - yOffset);
        });

        pane.setCenter(devices());

        Scene scene = new Scene(pane);
        scene.setFill(Color.TRANSPARENT);
        scene.getStylesheets().add(getClass().getResource("/styles.css").toExternalForm());

        primaryStage.setScene(scene);
        primaryStage.initStyle(StageStyle.UNDECORATED);
        primaryStage.setAlwaysOnTop(true);
        primaryStage.setResizable(false);
        primaryStage.show();

        AnimationTimer watcher = new AnimationTimer() {
            @Override
            public void handle(long now) {
                if (ph !=null && ph.isOpen()) {

                    try {
                        Packet packet = ph.getNextPacket();
                        if (packet != null) {
                            StunPacket stunPacket = new StunPacket(packet, addr);

                            // If the packet is a REQUEST and OUTBOUND
                            if (stunPacket.getStatus() == StunPacket.STATUS.REQUEST
                                    && stunPacket.getBound() == StunPacket.BOUND.OUTBOUND) {
                                // Track for a response.
                                pings.put(stunPacket.getDestAddr(), ph.getTimestamp().getTime());
                            } else if (stunPacket.getStatus() == StunPacket.STATUS.RESPONSE
                                    && stunPacket.getBound() == StunPacket.BOUND.INBOUND) {
                                // Response received
                                Long time = pings.get(stunPacket.getSrcAddr());
                                if (time != null) {
                                    System.out.format("%d: %d \n", stunPacket.getSrcAddr(),
                                            ph.getTimestamp().getTime() - time);
                                }
                                pings.put(stunPacket.getSrcAddr(), null);
                            }

                        }
                    } catch (NotOpenException e) {
                        e.printStackTrace();
                    }
                }
            }
        };

        watcher.start();
    }

    private HBox devices () {
        HBox box = new HBox();
        box.getStyleClass().add("hbox");

        ChoiceBox<InetAddress> choices = new ChoiceBox<>(FXCollections.observableArrayList());

        try {
            for (PcapNetworkInterface pni : Pcaps.findAllDevs()) {
                for (PcapAddress address : pni.getAddresses()) {
                    if (address.getNetmask() != null) {
                        choices.getItems().add(address.getAddress());
                    }
                }
            }
        } catch (PcapNativeException e) {
            e.printStackTrace();
        }

        choices.setMaxWidth(Double.MAX_VALUE);

        Button accept = new Button("Accept");

        accept.setOnMouseClicked(event -> {
            InetAddress choice = choices.getValue();

            if (choice != null) {
                if (ph != null) ph.close();
                try {
                    addr = choice;
                    ph = Pcaps.getDevByAddress(choice).openLive(65536,
                            PcapNetworkInterface.PromiscuousMode.NONPROMISCUOUS, 0);
                    ph.setFilter("udp && less 150", BpfProgram.BpfCompileMode.OPTIMIZE);
                } catch (PcapNativeException | NotOpenException e) {
                    e.printStackTrace();
                }
            }
        });

        box.getChildren().addAll(choices, accept);
        HBox.setHgrow(choices, Priority.ALWAYS);

        return box;
    }
}
